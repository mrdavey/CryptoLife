/**
 * Unlimited Unsigned Integer
 */

var _do = function(base, vv, fn) {
    var ret = false;

    if(Buffer.isBuffer(vv)) {
        if(vv.length <= 4) {
            var val = 0;

            switch(vv.length) {
            case 4:
                val = vv.readUInt32LE(0);
                break;
            case 2:
                val = vv.readUInt16LE(0);
                break;
            default:
                for(var i = 0; i < vv.length; ++i)
                    val += vv[i]*Math.pow(2,i*8);
            }

            ret = fn(base, val);
        }
    } else if(+vv === vv|0 && vv >= 0 && vv <= 0xFFFFFFFF) {
        ret = fn(base, vv);
    }

    return ret;
}

var _add = function(base, vv) {
    var step = base.length/4;
    var rem = 1;
    var val;

    for(var i = 0, pos = 0; i < step && rem; ++i, pos = i*4) {
        val = base.readUInt32LE(pos) + (i ? rem : vv);
        rem = val > 0xFFFFFFFF ? 1 : 0;
        val = rem ? val % 0x0100000000 : val;
        base.writeUInt32LE(val, pos);
    }

    return !rem;
};

var _sub = function(base, vv) {
    var step = base.length/4;
    var rem = 1;
    var val;

    for(var i = 0, pos = 0; i < step && rem; ++i, pos = i*4) {
        val = base.readUInt32LE(pos) - (i ? rem : vv);
        rem = val < 0 ? 1 : 0;
        val = rem ? val + 0x0100000000 : val;
        base.writeUInt32LE(val, pos);
    }

    return !rem;
};

var _cmp = function(base, other) {
    var ret = null;

    if(Buffer.isBuffer(other)) {
        var length = base.length > other.length
                ? base.length
                : other.length;

        ret = 0;

        if(length) {
            var step = length/4;
            var tv;
            var ov;

            for(var i = --step, pos = i*4; i >= 0 && !ret; --i, pos = i*4) {
                if(base.length > pos && other.length > pos) {
                    tv = base.readUInt32LE(pos);
                    ov = other.readUInt32LE(pos);
                    ret = tv === ov ? 0 : (tv > ov ? 1 : -1);
                } else if(base.length > pos) {
                    tv = base.readUInt32LE(pos);
                    ret = tv ? 1 : 0;
                } else if(other.length > pos) {
                    ov = other.readUInt32LE(pos);
                    ret = ov ? -1 : 0;
                }
            }
        }
    }

    return ret;
};

var _vv = function(val) {
    var vv = null;

    if(val instanceof UltdUInt) {
        vv = val.rep();
    } else if(+val === val|0) {
        vv = val;
    }

    return vv;
}

var UltdUInt = function UltdUInt(size) {
    if(!(this instanceof UltdUInt))
        return new UltdUInt(size);

    this._rep = +size === size|0 && size%32 === 0
         ? new Buffer(size/8)
         : new Buffer(size = 0);

    this._rep.fill(0);
    this._size = size;
};

UltdUInt.prototype.next = function() {
    return _do(this._rep, 1, _add);
};

UltdUInt.prototype.prev = function() {
    return _do(this._rep, 1, _sub);
};

UltdUInt.prototype.add = function(val) {
    return _do(this._rep, _vv(val), _add);
};

UltdUInt.prototype.sub = function(val) {
    return _do(this._rep, _vv(val), _sub);
};

UltdUInt.prototype.eq = function(val) {
    var ret = _cmp(this._rep, _vv(val));
    return ret === null && false || ret === 0;
};

UltdUInt.prototype.neq = function(val) {
    var ret = _cmp(this._rep, _vv(val));
    return ret === null && true || ret !== 0;
}

UltdUInt.prototype.gt = function(val) {
    var ret = _cmp(this._rep, _vv(val));
    return ret === null && true || ret === 1;
};

UltdUInt.prototype.lt = function(val) {
    var ret = _cmp(this._rep, _vv(val));
    return ret === null && false || ret === -1;
};

UltdUInt.prototype.ge = function(val) {
    var ret = _cmp(this._rep, _vv(val));
    return ret === null && true || ret !== -1;
};

UltdUInt.prototype.le = function(val) {
    var ret = _cmp(this._rep, _vv(val));
    return ret === null && true || ret !== 1;
};

UltdUInt.prototype.size = function() {
    return this._size;
};

UltdUInt.prototype.internal_rep = function() {
    return this._rep;
};

UltdUInt.prototype.rep = function() {
    var buf = new Buffer(this._rep.length);
    this._rep.copy(buf);
    return buf;
};

module.exports = UltdUInt;
