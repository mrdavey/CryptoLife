var UltdUInt = require('../lib/UltdUInt');
var assert = require('assert');

describe('UltdUInt', function() {
    it('should create null default object because of undefined size', function() {
        var uu = new UltdUInt;
        assert.strictEqual(uu.size(), 0);
        assert(!uu.next());
        assert(!uu.prev());
        assert(!uu.add(1));
        assert(!uu.sub(1));
        assert.strictEqual(uu.rep().length, 0);
    });

    it('should create null default object because of invalid size', function() {
        var uu = new UltdUInt(16);
        assert.strictEqual(uu.size(), 0);
        assert(!uu.next());
        assert(!uu.prev());
        assert(!uu.add(1));
        assert(!uu.sub(1));
        assert.strictEqual(uu.rep().length, 0);
    });

    it('should be possible to add values on a valid object', function() {
        var uu = new UltdUInt(64);
        assert.strictEqual(uu.size(), 64);
        assert(uu.add(15));
        assert(uu.add(1));
        assert(uu.add(239));
        assert.strictEqual(uu.rep().toString('hex'), 'ff00000000000000');
        uu = new UltdUInt(32);
        assert(uu.add(1));
        assert(uu.add(uu));
        assert.strictEqual(uu.rep().toString('hex'), '02000000');
    });

    it('should be able to detect overflow', function() {
        var uu = new UltdUInt(32);
        assert.strictEqual(uu.size(), 32);
        assert(uu.add(0xFFFFFFFF));
        assert(!uu.add(1));
        assert.strictEqual(uu.rep().toString('hex'), '00000000');
    });

    it('should be possible to subtract values on a valid object', function() {
        var uu = new UltdUInt(64);
        assert.strictEqual(uu.size(), 64);
        assert(uu.add(255));
        assert(uu.sub(5));
        assert(uu.sub(10));
        assert.strictEqual(uu.rep().toString('hex'), 'f000000000000000');
        uu = new UltdUInt(32);
        assert(uu.add(1));
        assert(uu.sub(uu));
        assert.strictEqual(uu.rep().toString('hex'), '00000000');
    });

    it('should be able to detect underflow', function() {
        var uu = new UltdUInt(32);
        assert.strictEqual(uu.size(), 32);
        assert(!uu.sub(1));
        assert.strictEqual(uu.rep().toString('hex'), 'ffffffff');
    });

    it('should compare correctly different objects', function() {
        var uus = [ null, null ];

        // eq/neq
        uus[0] = new UltdUInt;
        uus[1] = new UltdUInt;
        assert(uus[0].eq(uus[1]));
        assert(!uus[1].neq(uus[0]));
        assert(uus[0].eq(uus[0]));
        assert(!uus[0].neq(uus[0]));
        assert(uus[1].eq(uus[1]));
        assert(!uus[1].neq(uus[1]));
        uus[0] = new UltdUInt(32);
        uus[1] = new UltdUInt(32);
        assert(uus[0].eq(uus[1]));
        assert(!uus[1].neq(uus[0]));
        assert(uus[0].add(1));
        assert(!uus[0].eq(uus[1]));
        assert(uus[1].neq(uus[0]));
        assert(uus[0].sub(1));
        assert(uus[0].eq(uus[1]));
        assert(!uus[1].neq(uus[0]));
        uus[1] = new UltdUInt(64);
        assert(uus[0].eq(uus[1]));
        assert(!uus[1].neq(uus[0]));
        assert(uus[0].add(Math.pow(2,32)-1));
        assert(uus[1].add(Math.pow(2,32)-1));
        assert(uus[0].eq(uus[1]));
        assert(!uus[1].neq(uus[0]));
        assert(uus[1].add(1));
        assert(!uus[0].eq(uus[1]));
        assert(uus[1].neq(uus[0]));
        assert(uus[1].add(Math.pow(2,32)-1));
        assert(!uus[0].eq(uus[1]));
        assert(uus[1].neq(uus[0]));
        assert(uus[1].sub(Math.pow(2,32)-1));
        assert(uus[1].sub(1));
        assert(uus[0].eq(uus[1]));
        assert(!uus[1].neq(uus[0]));
        assert(uus[0].eq(uus[0]));
        assert(!uus[0].neq(uus[0]));
        assert(uus[1].eq(uus[1]));
        assert(!uus[1].neq(uus[1]));

        // gt/lt/ge/le
        uus[0] = new UltdUInt;
        uus[1] = new UltdUInt;
        assert(!uus[0].gt(uus[1]));
        assert(!uus[1].gt(uus[0]));
        assert(!uus[0].lt(uus[1]));
        assert(!uus[1].lt(uus[0]));
        assert(!uus[0].gt(uus[0]));
        assert(!uus[1].gt(uus[1]));
        assert(!uus[0].lt(uus[0]));
        assert(!uus[1].lt(uus[1]));
        uus[0] = new UltdUInt(32);
        uus[1] = new UltdUInt(32);
        assert(uus[0].ge(uus[1]));
        assert(uus[1].ge(uus[0]));
        assert(uus[0].le(uus[1]));
        assert(uus[1].le(uus[0]));
        assert(uus[0].add(1));
        assert(uus[0].gt(uus[1]));
        assert(uus[0].ge(uus[1]));
        assert(uus[1].lt(uus[0]));
        assert(uus[1].le(uus[0]));
        uus[1] = new UltdUInt(64);
        assert(uus[0].gt(uus[1]));
        assert(uus[0].ge(uus[1]));
        assert(!uus[0].lt(uus[1]));
        assert(!uus[0].le(uus[1]));
        assert(!uus[1].gt(uus[0]));
        assert(!uus[1].ge(uus[0]));
        assert(uus[1].lt(uus[0]));
        assert(uus[1].le(uus[0]));
        assert(uus[1].add(Math.pow(2,32)-1));
        assert(!uus[0].gt(uus[1]));
        assert(!uus[0].ge(uus[1]));
        assert(uus[0].lt(uus[1]));
        assert(uus[0].le(uus[1]));
        assert(uus[1].gt(uus[0]));
        assert(uus[1].ge(uus[0]));
        assert(!uus[1].lt(uus[0]));
        assert(!uus[1].le(uus[0]));
        uus[0] = new UltdUInt(64);
        uus[1] = new UltdUInt(32);
        uus[0].add(Math.pow(2,32)-1);
        uus[1].add(Math.pow(2,32)-1);
        assert(!uus[0].gt(uus[1]));
        assert(uus[0].ge(uus[1]));
        assert(!uus[0].lt(uus[1]));
        assert(uus[0].le(uus[1]));
        assert(!uus[1].gt(uus[0]));
        assert(uus[1].ge(uus[0]));
        assert(!uus[1].lt(uus[0]));
        assert(uus[1].le(uus[0]));
    });

    it('should be able to go on step by step', function() {
        var uu = new UltdUInt(32);
        assert.strictEqual(uu.size(), 32);
        for(var i = 0; i < 0xff; ++i) assert(uu.next());
        assert.strictEqual(uu.rep().toString('hex'), 'ff000000');
    });

    it('should be able to go back step by step', function() {
        var uu = new UltdUInt(32);
        assert.strictEqual(uu.size(), 32);
        assert(uu.add(0xff));
        for(var i = 0; i < 0xff; ++i) assert(uu.prev());
        assert.strictEqual(uu.rep().toString('hex'), '00000000');
    });
});
