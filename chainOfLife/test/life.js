import chai from 'chai';
const Life = artifacts.require("./Life.sol");

const should = chai
  .use(require('chai-as-promised'))
  .should();



contract('Life', (accounts) => {
  let life;
  const z = '0x0000000000000000000000000000000000000000000000000000000000000000';

  before(async() => {
  	life = await Life.new();
  });

  it('should oscilate', async () => {
  const initField = [
    z,
    '0x0000000000000000000000000000000000000000000000000000000000000015',
    z, z, z,
    '0x0000000000000000000000000000000000000000000000000000000000000002',
    '0x0000000000000000000000000000000000000000000000000000000000000002',
    '0x0000000000000000000000000000000000000000000000000000000000000002'];

    const state = await life.life(initField).should.be.fulfilled;
    assert(state[0] !== initField[0]);
    const resultField = await life.life(state).should.be.fulfilled;
    assert.deepEqual(resultField, initField);
  });

  it('should spawn gliders', async () => {
    // follows example in table 1 of paper: https://arxiv.org/pdf/cond-mat/0207679.pdf
    const initField = [
      z,
      '0x0000000000000000000000000000000000000000000000000000000000000015',
      z, z, z,
      '0x000000000000000000000000000000000000000000000000000000000000000a',
      '0x000000000000000000000000000000000000000000000000000000000000000a',
      '0x0000000000000000000000000000000000000000000000000000000000000005',
      '0x0000000000000000000000000000000000000000000000000000000000000005',
      '0x0000000000000000000000000000000000000000000000000000000000000005',
      '0x0000000000000000000000000000000000000000000000000000000000000005',
      '0x0000000000000000000000000000000000000000000000000000000000000005',
      z, z, z, z];
    const expected =  ['0x0000000000000000000000000000000000000000000000000000000000000004',
      '0x0000000000000000000000000000000000000000000000000000000000000004',
      '0x0000000000000000000000000000000000000000000000000000000000000004',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000505000',
      '0x000000000000000000000000000000000000000000000000000000000110440a',
      '0x000000000000000000000000000000000000000000000000000000000010400a',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000',
      '0x0000000000000000000000000000000000000000000000000000000000000000' ];

    let state = await life.life(initField).should.be.fulfilled;
    for (let i = 0; i < 18; i++) {
      state = await life.life(state).should.be.fulfilled;
    }
    assert.deepEqual(state, expected);
  });

  it('should create randomnes', async () => {
    const initField = [z, z, 
      '0x0000000000000000000000000000000000000000000000000000000000000004',
      '0x0000000000000000000000000000000000000000000000000000000000000011',
      '0x000000000000000000000000000000000000000000000000000000000000002a',
      z, z, z ];
    let state = await life.life(initField).should.be.fulfilled;
    state = await life.life(state).should.be.fulfilled;
    const expected =  [z, z, 
      '0x0000000000000000000000000000000000000000000000000000000000000002',
      '0x0000000000000000000000000000000000000000000000000000000000000005',
      '0x0000000000000000000000000000000000000000000000000000000000000005',
      z, z, z ];
    assert.deepEqual(state, expected);
  });
});